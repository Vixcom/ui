// /* All color definition for buttons, inputs, filter-effects */
@use "sass:selector";

@mixin unify-selector($a, $b) {
  @at-root #{selector.unify($a, $b)} {
    @content;
  }
}

@mixin append-selector($a, $b) {
  @at-root #{selector.append($a, $b)} {
    @content;
  }
}

// @mixin check-child-state($child) {
//   @at-root #{selector.unify($child, &)} {
//     @content;
//   }
// }

$default: #5B5B5B !default;
$default-background: #FFFFFF !default;
$accent: #34A853 !default;
$accent-dark: #34A853 !default;
$primary: #34A853 !default;
$secondary: #5c2d6b !default;
$secondary-light: #1C7D7D !default;
$secondary-dark: #002839 !default;
$white: #FFFFFF !default;
$black: #000000 !default;
$green: #1D5C2E !default;
$orange: #F58220 !default;
$purple: #561843 !default;
$blue: #0365A3 !default;
$yellow: #C4C400 !default;
$gold: #FFDF00 !default;
$pink: #ED028C !default;
$success: #24B624 !default;
$warning: #F98F00 !default;
$danger: #DC3545 !default;
$info: #17A2b8 !default;
$muted: #5B5B5B !default;
$muted-light: #ECECEC !default;
$border-color: #E4E4E4 !default;
$card-shadow: 0 1px 30px -10px transparentize($black, 0.5) !default;

/* primefaces.org */
$primaryTextColor: $primary;

$app-font-size: 0.85rem;

$app-colors-mapped: () !default;

$app-colors-mapped: map-merge(('accent': (bg: $accent, fg: #FFFFFF),
    'primary': (bg: $primary, fg: #FFFFFF),
    'secondary': (bg: $secondary, fg: #FFFFFF),
    'secondary-light': (bg: $secondary-light, fg: #FFFFFF),
    'secondary-dark': (bg: $secondary-dark, fg: #FFFFFF),
    'default': (bg: $default, fg: $white),
    'white': (bg: $white, fg: $default),
    'black': (bg: $black, fg: $white),
    'gold': (bg: $gold, fg: $white),
    'info': (bg: $info, fg: $white),
    'failed': (bg: $danger, fg: $white),
    'denied': (bg: $danger, fg: $white),
    'debit': (bg: $danger, fg: $white),
    'danger': (bg: $danger, fg: $white),
    'error': (bg: $danger, fg: $white),
    'false': (bg: $danger, fg: $white),
    'paid': (bg: $success, fg: $white),
    'approved': (bg: $success, fg: $white),
    'credit': (bg: $success, fg: $white),
    'credited': (bg: $success, fg: $white),
    'success': (bg: $success, fg: $white),
    'successful': (bg: $success, fg: $white),
    'completed': (bg: $success, fg: $white),
    'true': (bg: $success, fg: $white),
    'processing': (bg: $warning, fg: $white),
    'pending': (bg: $warning, fg: $white),
    'warning': (bg: $warning, fg: $white),
    'warn': (bg: $warning, fg: $white),
    'pink': (bg: $pink, fg: $white),
    'orange': (bg: $orange, fg: $white),
    'purple': (bg: $purple, fg: $white),
    'green': (bg: $green, fg: $white),
    'blue': (bg: $blue, fg: $white),
    'yellow': (bg: $yellow, fg: $white),
    'muted': (bg: $muted, fg: $white),
    'muted-light': (bg: $muted-light, fg: $secondary),
    'transparent': (bg: transparent, fg: $default)), $app-colors-mapped);

// /* Functions and Mixins */

// @mixin app-badge-variant($color) {
//   background-color: rgba($color, 0.25);
//   border: none;
//   color: darken($color, 10%);
//   font-weight: normal;
// }

@mixin mapped-tabs-variant($selector, $cm) {
  #{$selector} {

    &.fill {
      .tab {
        background-color: map-get($cm, "bg");
        color: map-get($cm, "fg");

        &.active {
          background-color: darken(map-get($cm, "bg"), 10%);
        }
      }
    }

    .tab {
      border: none;

      &:hover:not(.active) {
        background-color: lighten(map-get($cm, "bg"), 40%);
        color: darken(map-get($cm, "fg"), 90%);
      }

      &.active {
        background-color: map-get($cm, "bg");
        color: map-get($cm, "fg");
      }
    }
  }
}

@mixin mapped-bg-fg-variant($selector, $cm) {
  #{$selector} {
    background-color: map-get($cm, "bg") !important;
    color: map-get($cm, "fg") !important;
    border: none;

    &.is-blur {
      backdrop-filter: blur(10px);
      background-color: transparentize(map-get($cm, "bg"), 0.5) !important;

      &:hover {
        background-color: transparentize(map-get($cm, "bg"), 0.25) !important;
      }
    }
  }

  a#{$selector},
  button#{$selector} {
    &:hover {
      /* filter: brightness(110%) contrast(90%); */
      background-color: darken(map-get($cm, "bg"), 10%) !important;
      color: map-get($cm, "fg") !important;
    }

    &:active {
      background-color: darken(map-get($cm, "bg"), 20%) !important;
    }
  }

}

@mixin mapped-g-bg-fg-variant($selector, $cm) {
  #{$selector} {
    background: linear-gradient(map-get($cm, "bg"), darken(map-get($cm, "bg"), 10%)) !important;
    color: map-get($cm, "fg");
    border: none;
  }

  a#{$selector},
  button#{$selector} {
    &:hover {
      background: linear-gradient(lighten(map-get($cm, "bg"), 10%), map-get($cm, "bg")) !important;
      color: map-get($cm, "fg");
    }

    &:active {
      background: linear-gradient(darken(map-get($cm, "bg"), 10%), map-get($cm, "bg"));
    }
  }
}

@mixin mapped-color-variant($selector, $cm) {
  #{$selector} {
    color: map-get($cm, "bg") !important;
  }

  a#{$selector}:hover,
  button#{$selector}:hover {
    color: darken(map-get($cm, "bg"), 10%) !important;
  }
}

@mixin mapped-alert-variant($selector, $cm) {
  #{$selector} {
    background-color: lighten(map-get($cm, "bg"), 45%);
    color: darken(map-get($cm, "bg"), 45%);
    border: none;
  }
}

@mixin mapped-outline-variant($selector, $cm) {
  #{$selector} {
    background-color: transparent;
    color: map-get($cm, "bg");
    border: 1px solid currentColor;

  }

  a#{$selector},
  button#{$selector} {
    &:hover {
      background-color: darken(map-get($cm, "bg"), 10%);
      color: map-get($cm, "fg");
    }

    &:active {
      background-color: darken(map-get($cm, "bg"), 20%) !important;
    }
  }
}

// @each $k,
// $color in $theme-colors {
//   .badge-#{$k} {
//     @include app-badge-variant($color);
//   }
// }